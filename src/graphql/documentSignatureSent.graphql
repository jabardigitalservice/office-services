type DocumentSignatureSent {
    id: ID!
    signatureId: String! @rename(attribute: "ttd_id")
    peopleId: String! @rename(attribute: "PeopleID")
    to: String! @rename(attribute: "PeopleIDTujuan")
    date: String! @rename(attribute: "tgl")
    note: String @rename(attribute: "catatan")
    status: String
    sort: String @rename(attribute: "urutan")
    signatureDate: String @rename(attribute: "tgl_ttd")
    next: String
    sender: People! @with(relation: "sender")
    receiver: People! @with(relation: "receiver")
    previous: People @with(relation: "previous")
    forward: People @with(relation: "forward")
    read: Boolean @field(resolver: "App\\GraphQL\\Types\\DocumentSignatureSentType@isRead")
    statusRead: Boolean @field(resolver: "App\\GraphQL\\Types\\DocumentSignatureSentType@statusRead")
    isLastSigned: Boolean @field(resolver: "App\\GraphQL\\Types\\DocumentSignatureSentType@isLastSigned")
    parent: DocumentSignatureSent @field(resolver: "App\\GraphQL\\Types\\DocumentSignatureSentType@parent")
    documentSignature: DocumentSignature @belongsTo
}

type DocumentSignatureSentTimelines {
    documentSignatuerSents: [DocumentSignatureSent]
}

type DocumentSignatureSentHistory {
    documentSignatureDistribute: [InboxReceiver]
    documentSignatureForward: DocumentSignatureSent
    documentSignatureSent: [DocumentSignatureSent]
    documentSignatureSelf: DocumentSignature
}

input documentSignatureSentsInput {
    statuses: String
    read: Boolean
    withSender: Boolean
    withReceiver: Boolean
}

input outboxDocumentSignatureSentsInput {
    statuses: String
    types: String
}

input documentSignatureSentTimelineInput {
    documentSignatureId: String!
    sort: String!
    status: StatusType
}

input documentSignatureSentTimelinesInput {
    documentSignatureIds: String!
    sort: String!
    status: StatusType
}

enum StatusType {
    SIGNED
    UNSIGNED
}

enum ObjectiveType {
    IN
    OUT
}

#import people.graphql
#import documentSignature.graphql
#import inboxReceiver.graphql
