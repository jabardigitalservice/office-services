"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    inbox(id: ID @eq): InboxReceiver
        @field(resolver: "InboxQuery@detail")
        @guard

    inboxes(
        search: String @builder(method: "App\\Models\\InboxReceiver@search")
        filter: FilterInput @builder(method: "App\\Models\\InboxReceiver@filter")
    ): [InboxReceiver!]!
        @whereAuth(relation: "receiverByRoleId")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    inboxFile(
        id: ID! @builder(method: "App\\Models\\InboxFile@find")
    ): InboxFile
        @find
        @guard

    outboxes(
        search: String @builder(method: "App\\Models\\InboxReceiver@search")
        filter: FilterInput @builder(method: "App\\Models\\InboxReceiver@filter")
    ): [InboxReceiver!]!
        @whereAuth(relation: "senderByRoleId")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    outbox(id: ID @eq): InboxReceiver
        @find
        @guard

    inboxHistory(
        inboxId: String! @builder(method: "App\\Models\\InboxReceiver@history")
    ): [InboxReceiver!]!
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    me: People @auth

    peopleList(
        isActive: Int @where(key: "PeopleIsActive")
        filter: PeopleFilterInput @builder(method: "App\\Models\\People@filter")
    ): [People!]!
        @orderBy(column: "PrimaryRoleId", direction: ASC)
        @paginate(type: CONNECTION)
        @guard

    dispositionTypeList: [MasterDisposition!]!
        @whereAuth(relation: "byGroupPosition")
        @paginate(type: CONNECTION)
        @guard

    # You can use this @field code for experiment query leveling -> @field(resolver: "DocumentSignatureQuery@list")
    documentSignatureSents(
        search: String @builder(method: "App\\Models\\DocumentSignatureSent@search")
        filter: documentSignatureSentsInput @builder(method: "App\\Models\\DocumentSignatureSent@filter")
    ): [DocumentSignatureSent!]!
        @orderBy(column: "tgl", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    documentSignatureSent(
        id: ID @eq
    ): DocumentSignatureSent!
        @field(resolver: "DocumentSignatureQuery@detail")
        @guard

    documentSignature(id: ID@eq): DocumentSignature!
        @find
        @guard

    documentSignatureSentTimeline(
        filter: documentSignatureSentTimelineInput @builder(method: "App\\Models\\DocumentSignatureSent@filterTimeline")
    ): [DocumentSignatureSent!]!
        @orderBy(column: "urutan", direction: DESC)
        @guard
}

type Mutation {
    login(input: LoginInput): AuthPayload
        @field(resolver: "AuthMutator@login")

    inboxForward(input: ForwardInput!): [InboxReceiver]
        @field(resolver: "InboxMutator@forward")

    endInboxForward(inboxId: String!): String
        @field(resolver: "InboxMutator@endForward")

    documentSignature(input: DocumentSignatureInput): DocumentSignatureSent
        @field(resolver: "DocumentSignatureMutator@signature")

    documentSignatureReject(input: DocumentSignaturRejectInput): DocumentSignatureSent
        @field(resolver: "DocumentSignatureRejectMutator@reject")

    documentSignatureForward(input: DocumentSignatureForwardInput): [DocumentSignatureForwards!]
        @field(resolver: "DocumentSignatureForwardMutator@forward")
}

#import auth.graphql
#import inboxReceiver.graphql
#import inboxFile.graphql
#import people.graphql
#import documentSignatureSent.graphql
#import documentSignature.graphql
#import documentSignatureForward.graphql
#import masterDisposition.graphql
