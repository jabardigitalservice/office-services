"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    inbox(id: ID @eq): InboxReceiver
        @field(resolver: "InboxQuery@detail")
        @guard

    inboxes(
        orderBy: _ @orderBy(columns: ["ReceiveDate"])
        search: String @builder(method: "App\\Models\\InboxReceiver@search")
        filter: FilterInput @builder(method: "App\\Models\\InboxReceiver@filter")
    ): [InboxReceiver!]!
        @whereAuth(relation: "receiverByRoleId")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    ValidationDocument(
        filter: ValidationDocumentFilterInput!
    ): ValidationDocument
        @field(resolver: "ValidationDocumentQuery")
        @guard

    outboxes(
        search: String @builder(method: "App\\Models\\InboxReceiver@search")
        filter: FilterInput @builder(method: "App\\Models\\InboxReceiver@filter")
    ): [InboxReceiver!]!
        @whereAuth(relation: "senderByRoleId")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    outbox(id: ID @eq): InboxReceiver
        @find
        @guard

    inboxHistory(
        filter: InboxHistoryFilterInput! @builder(method: "App\\Models\\InboxReceiver@history")
    ): [InboxReceiver!]!
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    inboxUnreadCount: UnreadCount!
        @field(resolver: "InboxQuery@unreadCount")
        @guard

    me: People @auth

    peopleList(
        isActive: Int @where(key: "PeopleIsActive")
        search: String @builder(method: "App\\Models\\People@search")
        filter: PeopleFilterInput @builder(method: "App\\Models\\People@filter")
    ): [People!]!
        @orderBy(column: "PrimaryRoleId", direction: ASC)
        @paginate(type: CONNECTION)
        @guard

    dispositionTypeList: [MasterDisposition!]!
        @whereAuth(relation: "byGroupPosition")
        @paginate(type: CONNECTION)
        @guard

    # You can use this @field code for experiment query leveling -> @field(resolver: "DocumentSignatureQuery@list")
    documentSignatureSents(
        orderBy: _ @orderBy(columns: ["tgl"])
        search: String @builder(method: "App\\Models\\DocumentSignatureSent@search")
        filter: documentSignatureSentsInput @builder(method: "App\\Models\\DocumentSignatureSent@filter")
    ): [DocumentSignatureSent!]!
        @orderBy(column: "tgl", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    outboxDocumentSignatureSents(
        search: String @builder(method: "App\\Models\\DocumentSignatureSent@search")
        filter: outboxDocumentSignatureSentsInput @builder(method: "App\\Models\\DocumentSignatureSent@outboxFilter")
        objective: ObjectiveType @builder(method: "App\\Models\\DocumentSignatureSent@objective")
    ): [DocumentSignatureSent!]!
        @orderBy(column: "tgl", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    documentSignatureSent(
        id: ID @eq
    ): DocumentSignatureSent!
        @field(resolver: "DocumentSignatureQuery@detail")
        @guard

    documentSignatureSentTimelines(
        filter: documentSignatureSentTimelinesInput
    ): [DocumentSignatureSentTimelines!]!
        @field(resolver: "DocumentSignatureQuery@timelines")
        @guard

    documentSignatureSentTimeline(
        filter: documentSignatureSentTimelineInput @builder(method: "App\\Models\\DocumentSignatureSent@filterTimeline")
    ): [DocumentSignatureSent!]!
        @all
        @orderBy(column: "urutan", direction: DESC)
        @guard

    documentSignatureSentHistory(
        documentSignatureId: ID @eq
    ): DocumentSignatureSentHistory
        @field(resolver: "DocumentSignatureHistoryQuery@history")
        @guard

    drafts(
        filter: DraftFilterInput @builder(method: "App\\Models\\InboxReceiverCorrection@filter")
        objective: DraftObjectiveType @builder(method: "App\\Models\\InboxReceiverCorrection@objective")
        grouping: Boolean @builder(method: "App\\Models\\InboxReceiverCorrection@grouping")
        search: String @builder(method: "App\\Models\\InboxReceiverCorrection@search")
    ): [InboxReceiverCorrection!]!
        @whereAuth(relation: "receiver")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    outboxDrafts(
        filter: DraftFilterInput @builder(method: "App\\Models\\InboxReceiverCorrection@filter")
        objective: DraftObjectiveType @builder(method: "App\\Models\\InboxReceiverCorrection@objective")
        search: String @builder(method: "App\\Models\\InboxReceiverCorrection@search")
    ): [InboxReceiverCorrection!]!
        @whereAuth(relation: "sender")
        @orderBy(column: "ReceiveDate", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    draft(
        draftId: String!
        groupId: String!
    ): InboxReceiverCorrection
        @field(resolver: "DraftQuery@detail")
        @guard

    externalDrafts(
        filter: ExternalDraftFilterInput @builder(method: "App\\Models\\DocumentSignatureForward@filter")
        search: String @builder(method: "App\\Models\\DocumentSignatureForward@search")
    ): [DocumentSignatureForward!]!
        @whereAuth(relation: "receiver")
        @orderBy(column: "tgl", direction: DESC)
        @paginate(type: CONNECTION)
        @guard

    externalDraft(id: String @eq): DocumentSignatureForward
        @field(resolver: "ExternalDraftQuery@detail")
        @guard

    draftTimeline(
        filter: DraftTimelineInput @builder(method: "App\\Models\\InboxReceiverCorrection@timeline")
    ): [InboxReceiverCorrection!]!
        @field(resolver: "DraftQuery@timeline")
        @guard

    draftHistory(
        draftId: String
    ): InboxReceiverCorrectionHistory
        @field(resolver: "DraftHistoryQuery@history")
        @guard

    correctionOptions: [MasterCorrectionOption!]!
        @paginate(type: CONNECTION)
        @guard

    masterDocumentTypes: [DocumentType!]!
        @orderBy(column: "JenisName", direction: ASC)
        @all
        @guard

    masterDocumentUrgencies: [DocumentUrgency!]!
        @orderBy(column: "UrgensiName", direction: ASC)
        @all
        @guard

    masterClassifieds: [MasterClassified!]!
        @orderBy(column: "SIfatName", direction: ASC)
        @all
        @guard
}

type Mutation {
    login(input: LoginInput): AuthPayload
        @field(resolver: "AuthMutator@login")

    inboxForward(input: ForwardInput!): [InboxReceiver]
        @field(resolver: "InboxMutator@forward")
        @guard

    endInboxForward(inboxId: String!): String
        @field(resolver: "InboxMutator@endForward")
        @guard

    documentSignature(input: DocumentSignatureInput): DocumentSignatureSent
        @field(resolver: "DocumentSignatureMutator@signature")
        @guard

    draftSignature(input: DraftSignatureInput): Draft
        @field(resolver: "DraftSignatureMutator@signature")
        @guard

    documentSignatureReject(input: DocumentSignaturRejectInput): DocumentSignatureSent
        @field(resolver: "DocumentSignatureRejectMutator@reject")
        @guard

    draftReturn(input: DraftReturnInput): InboxReceiverCorrection!
        @field(resolver: "InboxReceiverCorrectionMutator@backToDrafter")
        @guard

    distributeDocumentToInbox(input: DistributeDocumentToInboxInput): DocumentSignature!
        @field(resolver: "DistributeDocumentMutator@distributeDocumentToInbox")
        @guard

    draftNumber(input: DraftNumberInput): InboxReceiverCorrection!
        @field(resolver: "DraftNumberMutator@addNumber")
        @guard

    distributeInbox(input: DistributeInboxInput): Inbox!
        @field(resolver: "DistributeInboxMutator@distributeInbox")
        @guard
}

#import auth.graphql
#import inboxReceiver.graphql
#import inboxFile.graphql
#import people.graphql
#import documentSignatureSent.graphql
#import documentSignature.graphql
#import documentSignatureForward.graphql
#import documentType.graphql
#import masterClassified.graphql
#import masterDisposition.graphql
#import documentUrgency.graphql
#import inboxReceiverCorrection.graphql
#import masterCorrectionOption.graphql
#import validation.graphql
